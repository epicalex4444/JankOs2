/* automatically generated by rust-bindgen 0.59.2 */

pub type UINT64 = u64;
pub type INT64 = i64;
pub type UINT32 = u32;
pub type INT32 = i32;
pub type UINT16 = u16;
pub type INT16 = i16;
pub type UINT8 = u8;
pub type INT8 = i8;
pub type WCHAR = i32;
pub type INTN = i64;
pub type UINTN = u64;
pub type CHAR16 = UINT16;
pub type CHAR8 = UINT8;
pub type BOOLEAN = UINT8;
pub type EFI_STATUS = UINTN;
pub type EFI_LBA = UINT64;
pub type EFI_TPL = UINTN;
pub type EFI_HANDLE = *mut ::core::ffi::c_void;
pub type EFI_EVENT = *mut ::core::ffi::c_void;
pub type EFI_PHYSICAL_ADDRESS = UINT64;
pub type EFI_GRAPHICS_OUTPUT_PROTOCOL = _EFI_GRAPHICS_OUTPUT_PROTOCOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EFI_PIXEL_BITMASK {
    pub RedMask: UINT32,
    pub GreenMask: UINT32,
    pub BlueMask: UINT32,
    pub ReservedMask: UINT32,
}
#[test]
fn bindgen_test_layout_EFI_PIXEL_BITMASK() {
    assert_eq!(
        ::core::mem::size_of::<EFI_PIXEL_BITMASK>(),
        16usize,
        concat!("Size of: ", stringify!(EFI_PIXEL_BITMASK))
    );
    assert_eq!(
        ::core::mem::align_of::<EFI_PIXEL_BITMASK>(),
        4usize,
        concat!("Alignment of ", stringify!(EFI_PIXEL_BITMASK))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EFI_PIXEL_BITMASK>())).RedMask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_PIXEL_BITMASK),
            "::",
            stringify!(RedMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EFI_PIXEL_BITMASK>())).GreenMask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_PIXEL_BITMASK),
            "::",
            stringify!(GreenMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EFI_PIXEL_BITMASK>())).BlueMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_PIXEL_BITMASK),
            "::",
            stringify!(BlueMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EFI_PIXEL_BITMASK>())).ReservedMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_PIXEL_BITMASK),
            "::",
            stringify!(ReservedMask)
        )
    );
}
pub const EFI_GRAPHICS_PIXEL_FORMAT_PixelRedGreenBlueReserved8BitPerColor:
    EFI_GRAPHICS_PIXEL_FORMAT = 0;
pub const EFI_GRAPHICS_PIXEL_FORMAT_PixelBlueGreenRedReserved8BitPerColor:
    EFI_GRAPHICS_PIXEL_FORMAT = 1;
pub const EFI_GRAPHICS_PIXEL_FORMAT_PixelBitMask: EFI_GRAPHICS_PIXEL_FORMAT = 2;
pub const EFI_GRAPHICS_PIXEL_FORMAT_PixelBltOnly: EFI_GRAPHICS_PIXEL_FORMAT = 3;
pub const EFI_GRAPHICS_PIXEL_FORMAT_PixelFormatMax: EFI_GRAPHICS_PIXEL_FORMAT = 4;
pub type EFI_GRAPHICS_PIXEL_FORMAT = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EFI_GRAPHICS_OUTPUT_MODE_INFORMATION {
    pub Version: UINT32,
    pub HorizontalResolution: UINT32,
    pub VerticalResolution: UINT32,
    pub PixelFormat: EFI_GRAPHICS_PIXEL_FORMAT,
    pub PixelInformation: EFI_PIXEL_BITMASK,
    pub PixelsPerScanLine: UINT32,
}
#[test]
fn bindgen_test_layout_EFI_GRAPHICS_OUTPUT_MODE_INFORMATION() {
    assert_eq!(
        ::core::mem::size_of::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).Version as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).HorizontalResolution
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(HorizontalResolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).VerticalResolution
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(VerticalResolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).PixelFormat
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(PixelFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).PixelInformation
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(PixelInformation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_MODE_INFORMATION>())).PixelsPerScanLine
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_MODE_INFORMATION),
            "::",
            stringify!(PixelsPerScanLine)
        )
    );
}
#[doc = "Return the current video mode information."]
#[doc = ""]
#[doc = "@param  This       Protocol instance pointer."]
#[doc = "@param  ModeNumber The mode number to return information on."]
#[doc = "@param  SizeOfInfo A pointer to the size, in bytes, of the Info buffer."]
#[doc = "@param  Info       A pointer to callee allocated buffer that returns information about ModeNumber."]
#[doc = ""]
#[doc = "@retval EFI_SUCCESS           Mode information returned."]
#[doc = "@retval EFI_BUFFER_TOO_SMALL  The Info buffer was too small."]
#[doc = "@retval EFI_DEVICE_ERROR      A hardware error occurred trying to retrieve the video mode."]
#[doc = "@retval EFI_NOT_STARTED       Video display is not initialized. Call SetMode ()"]
#[doc = "@retval EFI_INVALID_PARAMETER One of the input args was NULL."]
pub type EFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE = ::core::option::Option<
    unsafe extern "C" fn(
        This: *mut EFI_GRAPHICS_OUTPUT_PROTOCOL,
        ModeNumber: UINT32,
        SizeOfInfo: *mut UINTN,
        Info: *mut *mut EFI_GRAPHICS_OUTPUT_MODE_INFORMATION,
    ) -> EFI_STATUS,
>;
#[doc = "Return the current video mode information."]
#[doc = ""]
#[doc = "@param  This              Protocol instance pointer."]
#[doc = "@param  ModeNumber        The mode number to be set."]
#[doc = ""]
#[doc = "@retval EFI_SUCCESS       Graphics mode was changed."]
#[doc = "@retval EFI_DEVICE_ERROR  The device had an error and could not complete the request."]
#[doc = "@retval EFI_UNSUPPORTED   ModeNumber is not supported by this device."]
pub type EFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE = ::core::option::Option<
    unsafe extern "C" fn(This: *mut EFI_GRAPHICS_OUTPUT_PROTOCOL, ModeNumber: UINT32) -> EFI_STATUS,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EFI_GRAPHICS_OUTPUT_BLT_PIXEL {
    pub Blue: UINT8,
    pub Green: UINT8,
    pub Red: UINT8,
    pub Reserved: UINT8,
}
#[test]
fn bindgen_test_layout_EFI_GRAPHICS_OUTPUT_BLT_PIXEL() {
    assert_eq!(
        ::core::mem::size_of::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>(),
        4usize,
        concat!("Size of: ", stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL))
    );
    assert_eq!(
        ::core::mem::align_of::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>(),
        1usize,
        concat!("Alignment of ", stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>())).Blue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL),
            "::",
            stringify!(Blue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>())).Green as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL),
            "::",
            stringify!(Green)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>())).Red as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL),
            "::",
            stringify!(Red)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL>())).Reserved as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL),
            "::",
            stringify!(Reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION {
    pub Pixel: EFI_GRAPHICS_OUTPUT_BLT_PIXEL,
    pub Raw: UINT32,
}
#[test]
fn bindgen_test_layout_EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION() {
    assert_eq!(
        ::core::mem::size_of::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION>(),
        4usize,
        concat!("Size of: ", stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION))
    );
    assert_eq!(
        ::core::mem::align_of::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION>())).Pixel as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION),
            "::",
            stringify!(Pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION>())).Raw as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_BLT_PIXEL_UNION),
            "::",
            stringify!(Raw)
        )
    );
}
pub const EFI_GRAPHICS_OUTPUT_BLT_OPERATION_EfiBltVideoFill: EFI_GRAPHICS_OUTPUT_BLT_OPERATION = 0;
pub const EFI_GRAPHICS_OUTPUT_BLT_OPERATION_EfiBltVideoToBltBuffer:
    EFI_GRAPHICS_OUTPUT_BLT_OPERATION = 1;
pub const EFI_GRAPHICS_OUTPUT_BLT_OPERATION_EfiBltBufferToVideo: EFI_GRAPHICS_OUTPUT_BLT_OPERATION =
    2;
pub const EFI_GRAPHICS_OUTPUT_BLT_OPERATION_EfiBltVideoToVideo: EFI_GRAPHICS_OUTPUT_BLT_OPERATION =
    3;
pub const EFI_GRAPHICS_OUTPUT_BLT_OPERATION_EfiGraphicsOutputBltOperationMax:
    EFI_GRAPHICS_OUTPUT_BLT_OPERATION = 4;
pub type EFI_GRAPHICS_OUTPUT_BLT_OPERATION = u32;
#[doc = "The following table defines actions for BltOperations:"]
#[doc = ""]
#[doc = "<B>EfiBltVideoFill</B> - Write data from the  BltBuffer pixel (SourceX, SourceY)"]
#[doc = "directly to every pixel of the video display rectangle"]
#[doc = "(DestinationX, DestinationY) (DestinationX + Width, DestinationY + Height)."]
#[doc = "Only one pixel will be used from the BltBuffer. Delta is NOT used."]
#[doc = ""]
#[doc = "<B>EfiBltVideoToBltBuffer</B> - Read data from the video display rectangle"]
#[doc = "(SourceX, SourceY) (SourceX + Width, SourceY + Height) and place it in"]
#[doc = "the BltBuffer rectangle (DestinationX, DestinationY )"]
#[doc = "(DestinationX + Width, DestinationY + Height). If DestinationX or"]
#[doc = "DestinationY is not zero then Delta must be set to the length in bytes"]
#[doc = "of a row in the BltBuffer."]
#[doc = ""]
#[doc = "<B>EfiBltBufferToVideo</B> - Write data from the  BltBuffer rectangle"]
#[doc = "(SourceX, SourceY) (SourceX + Width, SourceY + Height) directly to the"]
#[doc = "video display rectangle (DestinationX, DestinationY)"]
#[doc = "(DestinationX + Width, DestinationY + Height). If SourceX or SourceY is"]
#[doc = "not zero then Delta must be set to the length in bytes of a row in the"]
#[doc = "BltBuffer."]
#[doc = ""]
#[doc = "<B>EfiBltVideoToVideo</B> - Copy from the video display rectangle (SourceX, SourceY)"]
#[doc = "(SourceX + Width, SourceY + Height) .to the video display rectangle"]
#[doc = "(DestinationX, DestinationY) (DestinationX + Width, DestinationY + Height)."]
#[doc = "The BltBuffer and Delta  are not used in this mode."]
#[doc = ""]
#[doc = "@param  This         Protocol instance pointer."]
#[doc = "@param  BltBuffer    Buffer containing data to blit into video buffer. This"]
#[doc = "buffer has a size of Width*Height*sizeof(EFI_GRAPHICS_OUTPUT_BLT_PIXEL)"]
#[doc = "@param  BltOperation Operation to perform on BlitBuffer and video memory"]
#[doc = "@param  SourceX      X coordinate of source for the BltBuffer."]
#[doc = "@param  SourceY      Y coordinate of source for the BltBuffer."]
#[doc = "@param  DestinationX X coordinate of destination for the BltBuffer."]
#[doc = "@param  DestinationY Y coordinate of destination for the BltBuffer."]
#[doc = "@param  Width        Width of rectangle in BltBuffer in pixels."]
#[doc = "@param  Height       Hight of rectangle in BltBuffer in pixels."]
#[doc = "@param  Delta        OPTIONAL"]
#[doc = ""]
#[doc = "@retval EFI_SUCCESS           The Blt operation completed."]
#[doc = "@retval EFI_INVALID_PARAMETER BltOperation is not valid."]
#[doc = "@retval EFI_DEVICE_ERROR      A hardware error occured writting to the video buffer."]
pub type EFI_GRAPHICS_OUTPUT_PROTOCOL_BLT = ::core::option::Option<
    unsafe extern "C" fn(
        This: *mut EFI_GRAPHICS_OUTPUT_PROTOCOL,
        BltBuffer: *mut EFI_GRAPHICS_OUTPUT_BLT_PIXEL,
        BltOperation: EFI_GRAPHICS_OUTPUT_BLT_OPERATION,
        SourceX: UINTN,
        SourceY: UINTN,
        DestinationX: UINTN,
        DestinationY: UINTN,
        Width: UINTN,
        Height: UINTN,
        Delta: UINTN,
    ) -> EFI_STATUS,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE {
    pub MaxMode: UINT32,
    pub Mode: UINT32,
    pub Info: *mut EFI_GRAPHICS_OUTPUT_MODE_INFORMATION,
    pub SizeOfInfo: UINTN,
    pub FrameBufferBase: EFI_PHYSICAL_ADDRESS,
    pub FrameBufferSize: UINTN,
}
#[test]
fn bindgen_test_layout_EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE() {
    assert_eq!(
        ::core::mem::size_of::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>(),
        40usize,
        concat!("Size of: ", stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE))
    );
    assert_eq!(
        ::core::mem::align_of::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).MaxMode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(MaxMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).Mode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).Info as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(Info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).SizeOfInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(SizeOfInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).FrameBufferBase
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(FrameBufferBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE>())).FrameBufferSize
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE),
            "::",
            stringify!(FrameBufferSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EFI_GRAPHICS_OUTPUT_PROTOCOL {
    pub QueryMode: EFI_GRAPHICS_OUTPUT_PROTOCOL_QUERY_MODE,
    pub SetMode: EFI_GRAPHICS_OUTPUT_PROTOCOL_SET_MODE,
    pub Blt: EFI_GRAPHICS_OUTPUT_PROTOCOL_BLT,
    pub Mode: *mut EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE,
}
#[test]
fn bindgen_test_layout__EFI_GRAPHICS_OUTPUT_PROTOCOL() {
    assert_eq!(
        ::core::mem::size_of::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>(),
        32usize,
        concat!("Size of: ", stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL))
    );
    assert_eq!(
        ::core::mem::align_of::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>(),
        8usize,
        concat!("Alignment of ", stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>())).QueryMode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL),
            "::",
            stringify!(QueryMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>())).SetMode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL),
            "::",
            stringify!(SetMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>())).Blt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL),
            "::",
            stringify!(Blt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_EFI_GRAPHICS_OUTPUT_PROTOCOL>())).Mode as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_EFI_GRAPHICS_OUTPUT_PROTOCOL),
            "::",
            stringify!(Mode)
        )
    );
}
